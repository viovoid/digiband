int LoadTransTexture( char *filename){
	GLuint retval;
	SDL_Surface *sdlimage;
	void *raw;
	int w, h, i, j, bpp;
	Uint8 *srcPixel, *dstPixel;
	Uint32 truePixel;
	GLenum errorCode;

	sdlimage=IMG_Load(filename);

	if (!sdlimage){
		return 0;
	}
	if (sdlimage->format->BytesPerPixel < 2){
		SDL_FreeSurface(sdlimage);
		return 0;
	}

	w=sdlimage->w;
	h=sdlimage->h;

	raw=(void *)malloc(w * h *4);
	dstPixel = (Uint8 *)raw;

	SDL_LockSurface( sdlimage );

	bpp=sdlimage->format->BytesPerPixel;

	for (i=h-1; i>=0; i--){
		for (j=0; j<w; j++){
			srcPixel = (Uint8 *)sdlimage->pixels + i * sdlimage->pitch + j * bpp;
			switch(bpp){
			case 1:
				truePixel=*srcPixel;
				break;
			case 2:
				truePixel=*(Uint16 *)srcPixel;
				break;
			case 3:
				if (SDL_BYTEORDER == SDL_BIG_ENDIAN) {
					truePixel = srcPixel[0] << 16 | srcPixel[1]<<8 | srcPixel[2];
				}else{
					truePixel= srcPixel[0] | srcPixel[1]<<8 | srcPixel[2] << 16;
				}
				break;
			case 4:
				truePixel= *(Uint32 *)srcPixel;
				break;
			default:
				SDL_UnlockSurface(sdlimage);
				SDL_FreeSurface(sdlimage);
				free (raw);
				return 0;
				break;
			}

			SDL_GetRGBA( truePixel, sdlimage->format, &(dstPixel[0]), &(dstPixel[1]), & (dstPixel[2]), &(dstPixel[3]));
			dstPixel+=4;
		}
	}

	SDL_UnlockSurface( sdlimage );
	SDL_FreeSurface( sdlimage );

	while ( glGetError() ) { ; }

	glGenTextures( 1, &retval );
	glBindTexture( GL_TEXTURE_2D, retval );
	glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP );

	errorCode = glGetError();
	if (errorCode !=0){
		if (errorCode == GL_OUT_OF_MEMORY){
			printf("Out of texture memory!\n");
		}

		glDeleteTextures(1, &retval);
		free (raw);
		return 0;
	}

	gluBuild2DMipmaps( GL_TEXTURE_2D, 4, w, h, GL_RGBA, GL_UNSIGNED_BYTE, (Uint8 *)raw);


	errorCode = glGetError();
	if ( errorCode !=0){
		if (errorCode == GL_OUT_OF_MEMORY ){
			printf("Out of texture memory!\n");
		}
		glDeleteTextures (1, &retval);
		free(raw);
		return 0;
	}
	free(raw);
	//free(srcPixel);
	//free(dstPixel);
	return retval;
}



bool loadtexture(int a, char *filename){
	g_Texture[a]=LoadTransTexture(filename);
	if (g_Texture[a]==0){
		return false;
	}else{
		return true;
	}
}

void deletetexture(int a){
	glDeleteTextures(1,&g_Texture[a]);
}

